if !(haskey(ENV, "JULIA_SCS_LIBRARY_PATH") || VERSION < v"1.3")
    @info("Installing default SCS binaries")
    exit(0)
end

using BinaryProvider, Libdl # requires BinaryProvider 0.3.0 or later

## NOTE: This is not a typical build.jl file; it has extra stuff toward the bottom.
## Don't just replace this file with the output of a BinaryBuilder repository!

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libscsindir"], :indirect),
    LibraryProduct(prefix, ["libscsdir"], :direct),
]

# Download binaries from hosted location
function url(triplet)
    return "https://github.com/JuliaBinaryWrappers/SCS_jll.jl/releases/download/SCS-v2.1.4+0/SCS.v2.1.4.$(triplet).tar.gz"
end

# If you need to recompute the hashes for theses files, use:
# using SHA
# for (key, arg) in download_info
#     print(key)
#     open(io -> println(bytes2hex(sha2_256(io))), download(arg[1]))
# end

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => (url("aarch64-linux-gnu"), "9db5a4a164da965855eee78106649713076f049649d5ecfaeab77c6644db843b"),
    Linux(:aarch64, libc=:musl) => (url("aarch64-linux-musl"), "bc7824a631efb8aad17b2de2dadecdecfec52d122ed4e452a55af088bd596708"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => (url("armv7l-linux-gnueabihf"), "1414a8e20f30ca3a26c54abec65465040e7080e5bc9343b1d8330e00f53e7643"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => (url("armv7l-linux-musleabihf"), "3ee878ae6a8b531705002d28c3ccc5b8441cab690255a3d9cf248ea0323e1697"),
    Linux(:i686, libc=:glibc) => (url("i686-linux-gnu"), "3431cbe6205f7ba45d0553948e3d8219416ce3015427fcfc4385b529e5d796e9"),
    Linux(:i686, libc=:musl) => (url("i686-linux-musl"), "2feecc5ee273035e4438ef1625efdde14ca5f5e0ad07cc10d0b9bef7ad94ed61"),
    Windows(:i686) => (url("i686-w64-mingw32"), "e600cccdb13a89624c968279e4bdb669111b0affa747ebfd891718cc499ee312"),
    Linux(:powerpc64le, libc=:glibc) => (url("powerpc64le-linux-gnu"), "98d6bb7bbab35b2d2a469648a637b13e3a74e0e518158aec5d3e8228b88cf776"),
    MacOS(:x86_64) => (url("x86_64-apple-darwin"), "a93bd2b54d660e86c67424880799a5bba08242c74f0c5ff8fc65e0ee4fc05523"),
    Linux(:x86_64, libc=:glibc) => (url("x86_64-linux-gnu"), "9546e6f1cda137b2e7a7d9128fc2e137ddd646cc31896fe080b8c8046ad599c7"),
    Linux(:x86_64, libc=:musl) => (url("x86_64-linux-musl"), "1802c7759575c296f276ef39ef729e36c2751459a52783f26ee84f9afa972a52"),
    FreeBSD(:x86_64) => (url("x86_64-unknown-freebsd"), "a2b28c174401978078927d6d534ab4d90004dcf546f86bc3952291449579272e"),
    Windows(:x86_64) => (url("x86_64-w64-mingw32"), "f55d5ddb60fcdae7c2502febb2770e7854e4c9aea6fb8cd67b77caad6b26eb29"),
)

this_platform = platform_key_abi()

custom_library = false
if haskey(ENV,"JULIA_SCS_LIBRARY_PATH")

    names_symbols = Dict("libscsdir"=>:direct, "libscsindir"=>:indirect, "libscsgpuindir"=>:gpuindirect)

    scs_prefix = ENV["JULIA_SCS_LIBRARY_PATH"]
    @assert isdir(scs_prefix)

    custom_products = Product[]
    @info "looking for scs libs in $scs_prefix"
    for fn in readdir(scs_prefix)
        if endswith(fn, Libdl.dlext) && haskey(names_symbols,first(split(fn, '.')))
            lib = first(split(fn, '.'))
            @info "found scs library: $lib"
            push!(custom_products,
                LibraryProduct(scs_prefix, [lib], names_symbols[lib]))
        end
    end

    if all(satisfied(p; verbose=verbose) for p in custom_products)
        products = custom_products
        custom_library = true
    else
        error("Could not install custom libraries from $(ENV["JULIA_SCS_LIBRARY_PATH"]).\nTo fall back to BinaryProvider call delete!(ENV,\"JULIA_SCS_LIBRARY_PATH\") and run build again.")
    end
end

if !custom_library
    # Install unsatisfied or updated dependencies:
    unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)

    dl_info = choose_download(download_info, this_platform)
    if dl_info === nothing && unsatisfied
        # If we don't have a compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something even more ambitious here.
        error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
    end

    # If we have a download, and we are unsatisfied (or the version we're
    # trying to install is not itself installed) then load it up!
    if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
        # Download and install binaries
        install(dl_info...; prefix=prefix, force=true, verbose=verbose)
    end
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
