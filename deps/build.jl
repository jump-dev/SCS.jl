if !haskey(ENV, "JULIA_SCS_LIBRARY_PATH")
    @info("Installing default SCS binaries")
    exit(0)
end

using BinaryProvider, Libdl # requires BinaryProvider 0.3.0 or later

## NOTE: This is not a typical build.jl file; it has extra stuff toward the bottom.
## Don't just replace this file with the output of a BinaryBuilder repository!

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(
    get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")),
)
products = [
    LibraryProduct(prefix, ["libscsindir"], :indirect),
    LibraryProduct(prefix, ["libscsdir"], :direct),
]

# Download binaries from hosted location
function url(triplet)
    return "https://github.com/JuliaBinaryWrappers/SCS_jll.jl/releases/download/SCS-v3.0.1+0/SCS.v3.0.1.$(triplet).tar.gz"
end

# If you need to recompute the hashes for theses files, use:
# using SHA
# for (key, arg) in download_info
#     print(key)
#     open(io -> println(bytes2hex(sha2_256(io))), download(arg[1]))
# end

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc = :glibc) => (
        url("aarch64-linux-gnu"),
        "d537dbb83d7e93fa2ec57ff99004b48dab848b00ee0742d89e175a7ebaf755ba",
    ),
    Linux(:aarch64, libc = :musl) => (
        url("aarch64-linux-musl"),
        "51478b3fc6fa39a54edce940a26d106d653875fe00565ce188b0eee0bb99da42",
    ),
    Linux(:armv7l, libc = :glibc, call_abi = :eabihf) => (
        url("armv7l-linux-gnueabihf"),
        "24546c8d11026fb460b4d987bae61e0165a4de191ff498ca87682e5387d4693f",
    ),
    Linux(:armv7l, libc = :musl, call_abi = :eabihf) => (
        url("armv7l-linux-musleabihf"),
        "cb520b6dc9afebe5023ea23c3926687b27d2f94305cd902ade158583ae2575e4",
    ),
    Linux(:i686, libc = :glibc) => (
        url("i686-linux-gnu"),
        "32080f1370793ab6fe9c758218a26562f1af97bf892ab64f4088326434c221d7",
    ),
    Linux(:i686, libc = :musl) => (
        url("i686-linux-musl"),
        "ef5c46bbaf6eb609ef41bdd98a09a35bf8eae7427f45d96d8599f8f860713d7f",
    ),
    Windows(:i686) => (
        url("i686-w64-mingw32"),
        "56e4f2b80286f1a4485b7ff6e237a7391303a6dd7df4fee27deac855d01864bd",
    ),
    Linux(:powerpc64le, libc = :glibc) => (
        url("powerpc64le-linux-gnu"),
        "ed4bfe1019c1250f0c8a537c6f4318129e7bea8a9ed7f37e1e48e7714463d53d",
    ),
    MacOS(:x86_64) => (
        url("x86_64-apple-darwin"),
        "bdb2c8bca320e30526fb12b3dae39978b68de16afca59c3d09cfc808b81107e1",
    ),
    Linux(:x86_64, libc = :glibc) => (
        url("x86_64-linux-gnu"),
        "13ea8ef67e632052573a137ea87bbed0faf65be3e2c02110dddbd68172251ab0",
    ),
    Linux(:x86_64, libc = :musl) => (
        url("x86_64-linux-musl"),
        "bcf719acef5420b7f1abea21e4b91eb895eb1ae4a7a4c75669909ad9826fd400",
    ),
    FreeBSD(:x86_64) => (
        url("x86_64-unknown-freebsd"),
        "8dff8888cd98064c92617734c7d7097edbbfc5d85b00e50345f5abc1345cbe8b",
    ),
    Windows(:x86_64) => (
        url("x86_64-w64-mingw32"),
        "e9ca2b56b719dd82dfb219ed236f1a3e21579d5d4d7c4311e7807011b222d372",
    ),
)

this_platform = platform_key_abi()

custom_library = false
if haskey(ENV, "JULIA_SCS_LIBRARY_PATH")
    names_symbols = Dict(
        "libscsdir" => :direct,
        "libscsindir" => :indirect,
        "libscsgpuindir" => :gpuindirect,
    )

    scs_prefix = ENV["JULIA_SCS_LIBRARY_PATH"]
    @assert isdir(scs_prefix)

    custom_products = Product[]
    @info "looking for scs libs in $scs_prefix"
    for fn in readdir(scs_prefix)
        if endswith(fn, Libdl.dlext) &&
           haskey(names_symbols, first(split(fn, '.')))
            lib = first(split(fn, '.'))
            @info "found scs library: $lib"
            push!(
                custom_products,
                LibraryProduct(scs_prefix, [lib], names_symbols[lib]),
            )
        end
    end

    if all(satisfied(p; verbose = verbose) for p in custom_products)
        products = custom_products
        custom_library = true
    else
        error(
            "Could not install custom libraries from $(ENV["JULIA_SCS_LIBRARY_PATH"]).\nTo fall back to BinaryProvider call delete!(ENV,\"JULIA_SCS_LIBRARY_PATH\") and run build again.",
        )
    end
end

if !custom_library
    # Install unsatisfied or updated dependencies:
    unsatisfied = any(!satisfied(p; verbose = verbose) for p in products)

    dl_info = choose_download(download_info, this_platform)
    if dl_info === nothing && unsatisfied
        # If we don't have a compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something even more ambitious here.
        error(
            "Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!",
        )
    end

    # If we have a download, and we are unsatisfied (or the version we're
    # trying to install is not itself installed) then load it up!
    if unsatisfied || !isinstalled(dl_info...; prefix = prefix)
        # Download and install binaries
        install(dl_info...; prefix = prefix, force = true, verbose = verbose)
    end
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose = verbose)
